#include "sort.h"

/**
 * partition - it partitions an array
 * @array: array to partition
 * @lb: lower bound of the array
 * @ub: upper bound of the array
 * Return: -1 if unsuccessful, else loc
 */

int partition(int *array, size_t size, int lb, int ub)
{
  int pivot = array[ub];
  int i = lb - 1;
  int j;
  int temp;

  if (size < 2 || array == NULL)
    return -1;

  for (j = lb; j < ub; j++)
    {
      if (array[j] <= pivot)
	{
	  i++;
	  temp = array[i];
	  array[i] = array[j];
	  array[j] = temp;
	}
    }
  temp = array[i + 1];
  array[i + 1] = array[ub];
  array[ub] = temp;

  return (i + 1);
}
/**
 * quick_sort_recursive - implements quick_sort recursively
 * @array: array of integers to sort
 * @size: size of array
 * Return: Nothing
 */

void quick_sort_recursive(int *array, size_t size, int lb, int ub)
{
  int loc;
  
  if (lb < ub)
    {
      loc = partition(array, size, lb, ub);
      quick_sort_recursive(array, size, lb, loc - 1);
      quick_sort_recursive(array, size, loc + 1, ub);
    }
}
/**
 * quick_sort - sort integers in ascending order
 * @array: array of integers
 * @size: size of the array
 * Return: Nothing
 */
void quick_sort(int *array, size_t size)
{
  if (size < 2 || array == NULL)
    return;
  quick_sort_recursive(array, size, 0, size - 1);
}
